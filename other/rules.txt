------------------------- ПОТОК -------------------------
Поток (Stream) — это последовательность элементов, над которой
можно выполнять набор операций (фильтрация, сортировка, подсчёт,
поиск и т.д.), не изменяя исходную коллекцию.

Допустим я могу создать объект потока:
  List<Person> people = ...;
  Stream<Person> stream = people.stream();

Теперь stream — это объект Stream, у которого есть методы для 
обработки данных. Есть 2 вида операций:

1. Промежуточные операции - это операции, которые подготавливают поток. Они начинают
обрабатывать только когда вызывается терминальная операция. Они возвращают
не результат, а новый поток, который можно дальше обрабатывать.

2. Терминальные операции - это операции, который завершают поток и возвращают результат.
Только терминальная операция запускает весь конвейер промежуточных операций. После
неё поток нельзя использовать повторно.

Некоторые терминальные операции могут не иметь результата, поэтому чтобы не возвращать
null, они используют безопасную обёртку Optional. 



------------------------- КОМПАРАТОР -------------------------
Компаратор (Comparator) - функциональный интерфейс, который определяет
правила сравнения двух объектов типа T.
  @FunctionalInterface
  public interface Comparator<T> {
      int compare(T o1, T o2);
  }

